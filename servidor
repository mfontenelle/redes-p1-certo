#!/bin/python3
import asyncio
from tcp import Servidor
import re


def validar_nome(nome): #feito
    return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None

def sair(conexao): #feito
    for i in servidor.channels:
        if conexao in servidor.channels[i]:
            servidor.channels[i].remove(conexao)
    if hasattr(conexao, 'channel'):
        sent = []
        for i in conexao.channel:
            for j in servidor.channels[i]:
                if j not in sent:
                    sent.append(j)
                    j.enviar(b':%s QUIT :Connection closed\r\n' % (conexao.nick))
    if hasattr(conexao, 'nick'):
        del servidor.nicks[conexao.nick.lower()]
    conexao.fechar()

def limpa(var): #feito
    return var.replace(b'\r', b'').replace(b'\n', b'')

def inserenick(nick, connection): #feito
    servidor.nicks[nick.lower()] = connection
    return

def sub_nick(ant, novo, connection): #feito
    servidor.nicks[novo.lower()] = connection
    del servidor.nicks[ant.lower()]
    return


def enviamsg(para, dee, msg): #feito
    if para[0] == 35:
        if para.lower() in servidor.channels:
            for i in servidor.channels[para.lower()]:
                if i.nick != dee:
                    i.enviar(b':%s PRIVMSG %s :%s\r\n' % (dee, para, msg))
    elif para.lower() in servidor.nicks:
        servidor.nicks[para.lower()].enviar(b':%s PRIVMSG %s :%s\r\n' % (dee, para, msg))
    return

def join_channel(channel, connection): #feito
    aux = channel
    channel = channel.lower()
    if not channel in servidor.channels:
        servidor.channels[channel] = []
    if connection not in servidor.channels[channel]:
        servidor.channels[channel].append(connection)

    if not hasattr(connection, 'channel'):
        connection.channel = []

    connection.channel.append(channel)

    members = []
    for i in servidor.channels[channel]:
        i.enviar(b':%s JOIN :%s\r\n' % (connection.nick, aux))
        members.append(i.nick)
    members = sorted(members)
    members_novo = []
    for i in members:
        if 19 + len(b' '.join(members_novo)) + len(i) > 510:
            connection.enviar(b':server 353 %s = %s :%s\r\n' % (connection.nick, aux, b' '.join(members_novo)))
            members_novo = []
        members_novo.append(i)
    if len(members) == 0:
        connection.enviar(b':server 353 %s = %s :%s\r\n' % (connection.nick, aux, b''))
    else:
        connection.enviar(b':server 353 %s = %s :%s\r\n' % (connection.nick, aux, b' '.join(members_novo)))
    connection.enviar(b':server 366 %s %s :End of /NAMES list.\r\n' % (connection.nick, aux))
    return

def leave_channel(channel, connection): #feito
    aux = servidor.channels[channel.lower()]
    for i in aux:
        i.enviar(b':%s PART %s\r\n' % (connection.nick, channel))
    aux.remove(connection)
    connection.channel.remove(channel)
    return

def resolve_residual(connection, data): #feito
    residuo = hasattr(connection, 'residual_data')
    if not b'\n' in data:
        if not residuo:
            connection.residual_data = data
        else:
            connection.residual_data = connection.residual_data + data
        return None
    elif data[-1] != b'\n':
        dado_separado = data.split(b'\n')
        if residuo:
            residuo_novo = connection.residual_data
        connection.residual_data = dado_separado[-1]
        if residuo:
            return (residuo_novo + b'\n'.join(dado_separado[:-1])).split(b'\n')
        else:
            return dado_separado[:-1]
    else:
        if residuo:
            return (connection.residual_data + b'\n'.join(data.split(b'\n')[:-1])).split(b'\n')
        else:
            return data.split(b'\n')[:-1]

def resolve_comando(connection, data): #feito
    if data == None:
        return
    for line in data:
        executar(connection, line)
        
def dados_recebidos(conexao, dados): #feito
    if dados == b'':
        return sair(conexao)
    # # print(dados)
    data = resolve_residual(conexao, dados)
    resolve_comando(conexao, data)
        
def conexao_aceita(conexao):
    conexao.registrar_recebedor(dados_recebidos)


def executar(connection, data): #feito
    dado_separado = data.split(b' ')
    comando = dado_separado[0]
    if comando == b'PING':
        resto = data.split(b' ', 1)[1]
        connection.enviar(b':server PONG server :' + resto + b'\n')
        return
    elif comando == b'NICK':
        resto = limpa(data.split(b' ', 1)[1])
        if resto.lower() in servidor.nicks:
            if hasattr(connection, 'nick'):
                connection.enviar(b':server 433 %s %s :Nickname is already in use\r\n' % (connection.nick, resto))
            else:
                connection.enviar(b':server 433 * %s :Nickname is already in use\r\n' % (resto))
            return
        if validar_nome(resto):
            if hasattr(connection, 'nick'):
                sub_nick(connection.nick, resto, connection)
                connection.enviar(b':%s NICK %s\r\n' % (connection.nick, resto))
            else:
                inserenick(resto, connection)
                connection.enviar(b':server 001 %s :Welcome\r\n:server 422 %s :MOTD File is missing\r\n' % (resto, resto))
            connection.nick = resto
            return
        else:
            if hasattr(connection, 'nick'):
                connection.enviar(b':server 432 %s %s :Erroneous nickname\r\n' % (connection.nick, resto))
            else:
                connection.enviar(b':server 432 * %s :Erroneous nickname\r\n' % (resto))
            return
    elif comando == b'PRIVMSG':
        dest = dado_separado[1]
        resto = limpa(data.split(b':', 1)[1])
        enviamsg(dest, connection.nick, resto)
    elif comando == b'JOIN':
        resto = limpa(data.split(b' ', 1)[1])
        if resto[0] != 35 or not validar_nome(resto[1:]):
            connection.enviar(b':server 403 canal :No such channel\r\n')
        else:
            join_channel(resto, connection)
    elif comando == b'PART':
        resto = limpa(data.split(b' ')[1])
        leave_channel(resto, connection)


servidor = Servidor(6667)
servidor.nicks = {}
servidor.channels = {}
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()
